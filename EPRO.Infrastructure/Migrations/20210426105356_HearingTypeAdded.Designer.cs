// <auto-generated />
using System;
using EPRO.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EPRO.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210426105356_HearingTypeAdded")]
    partial class HearingTypeAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasColumnName("app_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AppSecrtet")
                        .IsRequired()
                        .HasColumnName("app_secrtet")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CourtCode")
                        .IsRequired()
                        .HasColumnName("court_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasColumnName("court_name")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("pk_api_keys");

                    b.ToTable("api_keys");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionInfo")
                        .HasColumnName("action_info")
                        .HasColumnType("text");

                    b.Property<string>("ClientIP")
                        .HasColumnName("client_ip")
                        .HasColumnType("text");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ObjectInfo")
                        .HasColumnName("object_info")
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .HasColumnName("operation")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnName("request_url")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_audit_log");

                    b.HasIndex("CourtId")
                        .HasName("ix_audit_log_court_id");

                    b.HasIndex("UserId")
                        .HasName("ix_audit_log_user_id");

                    b.ToTable("audit_log");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.Dismissal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActDeclaredDate")
                        .HasColumnName("act_declared_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ActNumber")
                        .HasColumnName("act_document")
                        .HasColumnType("integer");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNumber")
                        .HasColumnName("case_number")
                        .HasColumnType("text");

                    b.Property<int>("CaseRoleId")
                        .HasColumnName("case_role_id")
                        .HasColumnType("integer");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id")
                        .HasColumnType("integer");

                    b.Property<int>("CaseYear")
                        .HasColumnName("case_year")
                        .HasColumnType("integer");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired")
                        .HasColumnType("text");

                    b.Property<string>("DismissalReason")
                        .HasColumnName("dismissalReason")
                        .HasColumnType("text");

                    b.Property<int>("DismissalTypeId")
                        .HasColumnName("dismissal_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnName("document_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DocumentNumber")
                        .HasColumnName("document_document")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentType")
                        .HasColumnName("document_type")
                        .HasColumnType("text");

                    b.Property<int>("EntryType")
                        .HasColumnName("entry_type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("HearingDate")
                        .HasColumnName("hearing_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HearingTypeId")
                        .HasColumnName("hearing_type")
                        .HasColumnType("integer");

                    b.Property<string>("JudgeFullName")
                        .HasColumnName("judge_full_name")
                        .HasColumnType("text");

                    b.Property<bool>("JudgeIsChairman")
                        .HasColumnName("judge_is_chairman")
                        .HasColumnType("boolean");

                    b.Property<bool>("ObjectionUpheld")
                        .HasColumnName("objection_upheld")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplaceJudgeFullName")
                        .HasColumnName("replacejudge_full_name")
                        .HasColumnType("text");

                    b.Property<bool>("ReplaceJudgeIsChairman")
                        .HasColumnName("replacejudge_is_chairman")
                        .HasColumnType("boolean");

                    b.Property<string>("SideFullName")
                        .HasColumnName("side_full_name")
                        .HasColumnType("text");

                    b.Property<string>("SideInvolmentKind")
                        .HasColumnName("side_involvment_kind")
                        .HasColumnType("text");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_dismissal");

                    b.HasIndex("ActTypeId")
                        .HasName("ix_dismissal_act_type_id");

                    b.HasIndex("CaseRoleId")
                        .HasName("ix_dismissal_case_role_id");

                    b.HasIndex("CaseTypeId")
                        .HasName("ix_dismissal_case_type_id");

                    b.HasIndex("CourtId")
                        .HasName("ix_dismissal_court_id");

                    b.HasIndex("DismissalTypeId")
                        .HasName("ix_dismissal_dismissal_type_id");

                    b.HasIndex("HearingTypeId")
                        .HasName("ix_dismissal_hearing_type");

                    b.HasIndex("UserExpiredId")
                        .HasName("ix_dismissal_user_expired_id");

                    b.HasIndex("UserId")
                        .HasName("ix_dismissal_user_id");

                    b.ToTable("dismissal");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.MongoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired")
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("integer");

                    b.Property<string>("SourceId")
                        .HasColumnName("source_id")
                        .HasColumnType("text");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_mongo_file");

                    b.HasIndex("UserExpiredId")
                        .HasName("ix_mongo_file_user_expired_id");

                    b.HasIndex("UserId")
                        .HasName("ix_mongo_file_user_id");

                    b.ToTable("mongo_file");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("UserExpiredId")
                        .HasName("ix_news_user_expired_id");

                    b.HasIndex("UserId")
                        .HasName("ix_news_user_id");

                    b.ToTable("news");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_application_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("identity_roles");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_role_claim");

                    b.HasIndex("RoleId")
                        .HasName("ix_application_role_claim_role_id");

                    b.ToTable("identity_role_claims");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("must_change_password")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Uic")
                        .HasColumnName("uic")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_application_user");

                    b.HasIndex("CourtId")
                        .HasName("ix_application_user_court_id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("identity_users");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claim");

                    b.HasIndex("UserId")
                        .HasName("ix_application_user_claim_user_id");

                    b.ToTable("identity_user_claims");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.HasKey("ProviderKey", "LoginProvider")
                        .HasName("pk_identity_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_application_user_login_user_id");

                    b.ToTable("identity_user_logins");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identity_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_application_user_role_role_id");

                    b.ToTable("identity_user_roles");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identity_user_tokens");

                    b.ToTable("identity_user_tokens");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.ActType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_act_type");

                    b.ToTable("nom_act_type");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.CaseRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_case_role");

                    b.ToTable("nom_case_role");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_case_type");

                    b.ToTable("nom_case_type");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_court");

                    b.ToTable("nom_court");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.DismissalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_dismissal_type");

                    b.ToTable("nom_dismissal_type");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Nomenclatures.HearingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_nom_hearing_type");

                    b.ToTable("nom_hearing_type");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.AuditLog", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .HasConstraintName("fk_audit_log_nom_court_court_id");

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_audit_log_application_user_user_id");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.Dismissal", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .HasConstraintName("fk_dismissal_nom_act_type_act_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.CaseRole", "CaseRole")
                        .WithMany()
                        .HasForeignKey("CaseRoleId")
                        .HasConstraintName("fk_dismissal_nom_case_role_case_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .HasConstraintName("fk_dismissal_nom_case_type_case_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .HasConstraintName("fk_dismissal_nom_court_court_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.DismissalType", "DismissalType")
                        .WithMany()
                        .HasForeignKey("DismissalTypeId")
                        .HasConstraintName("fk_dismissal_nom_dismissal_type_dismissal_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.HearingType", "HearingType")
                        .WithMany()
                        .HasForeignKey("HearingTypeId")
                        .HasConstraintName("fk_dismissal_nom_hearing_type_hearing_type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId")
                        .HasConstraintName("fk_dismissal_application_user_user_expired_id");

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_dismissal_application_user_user_id");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.MongoFile", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId")
                        .HasConstraintName("fk_mongo_file_application_user_user_expired_id");

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_mongo_file_application_user_user_id");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Common.News", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId")
                        .HasConstraintName("fk_news_application_user_user_expired_id");

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_news_application_user_user_id");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_application_role_claim_application_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Nomenclatures.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .HasConstraintName("fk_application_user_nom_court_court_id");
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_claim_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_login_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_application_user_role_application_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_role_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EPRO.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("EPRO.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_application_user_token_application_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
